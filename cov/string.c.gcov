        -:    0:Source:tst/string.c
        -:    0:Graph:./cov/test_string.gcno
        -:    0:Data:./cov/test_string.gcda
        -:    0:Runs:1
        -:    1:#include "../inc/test.h"
        -:    2:
function test_string called 1 returned 100% blocks executed 83%
        1:    3:void test_string (void) {
        1:    4:	printf (BOLD_YELLOW "Unit test starts..." BOLD_MAGENTA " [String]\n" RESET_STYLE);
        1:    4-block 2
call    0 returned 1
        -:    5:
        1:    6:	char* text = "Hello, World!\n";
        1:    7:	size_t length = 14;
        -:    8:
        1:    9:	String* string = create_string (length, text);
call    0 returned 1
        1:   10:	String* ghost_string = string;
        -:   11:
        -:   12:	// printf ("%lu %lu\n", length, sizeof (string -> text));
        -:   13:
       1*:   14:	TEST (NULL != string, "Address non-null check");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   14-block 5
call    2 returned 1
    %%%%%:   14-block 6
call    3 never executed
       1*:   15:	TEST (length == string -> length, "Allocated block-size check");
        1:   15-block 7
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   15-block 8
call    2 returned 1
    %%%%%:   15-block 9
call    3 never executed
       1*:   16:	TEST (string == ghost_string, "Address validation check");
        1:   16-block 10
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   16-block 11
call    2 returned 1
    %%%%%:   16-block 12
call    3 never executed
       1*:   17:	TEST (compare_raw_strings_shh (length, text, string -> length, string -> text), "Content check");
        1:   17-block 13
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   17-block 15
call    3 returned 1
    %%%%%:   17-block 16
call    4 never executed
        -:   18:
        -:   19://	void** string_addresses = capture_string_addresses (string);
        -:   20://	TEST (!is_string_memory_erased (string_addresses), "String existance check");
       1*:   21:	TEST (string == ghost_string, "String existance check");
        1:   21-block 17
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   21-block 18
call    2 returned 1
    %%%%%:   21-block 19
call    3 never executed
        1:   22:	delete_string (&string);
        1:   22-block 20
call    0 returned 1
       1*:   23:	TEST (string != ghost_string, "String deletion check");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   23-block 22
call    2 returned 1
    %%%%%:   23-block 23
call    3 never executed
        -:   24:
        -:   25:	//TEST (is_string_memory_erased (string_addresses), "String deletion check");
        -:   26://	ERASE (&string_addresses, 3 * sizeof (void*));
        -:   27:/*
        -:   28:	BYTE* ptr_b = (void*) string;
        -:   29:	BYTE* ptr_adr = (void*) (string -> address);
        -:   30:	BYTE* ptr_b_f = (void*) string;
        -:   31:
        -:   32:	for (size_t i = 0; i < sizeof (String); i++) {
        -:   33:		printf("%02x ", *ptr_b);
        -:   34:		ptr_b = ptr_b + 1;
        -:   35:	}
        -:   36:
        -:   37:	printf("\n");
        -:   38:
        -:   39:	delete_string (&string);
        -:   40:
        -:   41:	for (size_t i = 0; i < sizeof (size_t); i++) {
        -:   42:		printf("%02x ", *ptr_adr);
        -:   43:		ptr_adr = ptr_adr + 1;
        -:   44:	}
        -:   45:
        -:   46:	printf("\n");
        -:   47:
        -:   48:	for (size_t i = 0; i < sizeof (String); i++) {
        -:   49:		printf ("%02x ", *ptr_b_f);
        -:   50:		ptr_b_f = ptr_b_f + 1;
        -:   51:	}
        -:   52:
        -:   53:	printf("\n");
        -:   54:*/
        -:   55://	TEST (NULL == string, "Address nullified check");
        -:   56://	TEST (sizeof (int*) == sizeof (string), "De-allocated block-size check");
        -:   57://	TEST (NULL == string, "Address nullify check");
        -:   58://	TEST (ptr != vptr, "Address validation check");
        -:   59://	TEST (n != *((int*) vptr), "Content check");
        -:   60:
        1:   61:	String* str1 = create_string (5, "Hello");
        1:   61-block 24
call    0 returned 1
        1:   62:	String* str2 = create_string (5, "World");
call    0 returned 1
        1:   63:	string = concatenate_strings (2, str1, str2);
call    0 returned 1
       1*:   64:	TEST (string -> length == str1 -> length + str2 -> length, "Checked concatenated string lengths");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   64-block 28
call    2 returned 1
    %%%%%:   64-block 29
call    3 never executed
        1:   65:	ghost_string = create_string (10, "HelloWorld");
        1:   65-block 30
call    0 returned 1
       1*:   66:	TEST (Cmp_Different != compare_strings (string, ghost_string), "Matched concatenated strings");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   66-block 33
call    3 returned 1
    %%%%%:   66-block 34
call    4 never executed
        1:   67:	delete_string (&ghost_string);
        1:   67-block 35
call    0 returned 1
        1:   68:	delete_string (&string);
call    0 returned 1
        1:   69:	delete_string (&str1);
call    0 returned 1
        1:   70:	delete_string (&str2);
call    0 returned 1
        -:   71:
        1:   72:	string = create_string (3, "123");
call    0 returned 1
        1:   73:	ghost_string = string;
        1:   74:	str1 = create_string (3, "321");
call    0 returned 1
        1:   75:	str2 = create_string (3, "123");
call    0 returned 1
       1*:   76:	TEST (Cmp_Identical == compare_strings (string, ghost_string), "Matched identical strings");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   76-block 44
call    3 returned 1
    %%%%%:   76-block 45
call    4 never executed
       1*:   77:	TEST (Cmp_Different == compare_strings (string, str1), "Mis-matched different strings");
        1:   77-block 46
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   77-block 48
call    3 returned 1
    %%%%%:   77-block 49
call    4 never executed
       1*:   78:	TEST (Cmp_Equivalent == compare_strings (string, str2), "Matched equivalent strings");
        1:   78-block 50
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   78-block 52
call    3 returned 1
    %%%%%:   78-block 53
call    4 never executed
        1:   79:	delete_string (&string);
        1:   79-block 54
call    0 returned 1
        1:   80:	delete_string (&str1);
call    0 returned 1
        1:   81:	delete_string (&str2);
call    0 returned 1
        -:   82:
        1:   83:	string = create_string (5, "12345");
call    0 returned 1
       1*:   84:	TEST ('3' == get_char_at (string, 2), "Matched get char at given index in a string");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   84-block 60
call    3 returned 1
    %%%%%:   84-block 61
call    4 never executed
        1:   85:	delete_string (&string);
        1:   85-block 62
call    0 returned 1
        -:   86:
        1:   87:	String* str = NULL;
        -:   88:
        1:   89:	string = create_string (5, "abcde");
call    0 returned 1
        1:   90:	str = get_sub_string (string, 1, 3);
call    0 returned 1
       1*:   91:	TEST (true == compare_raw_strings_shh (3, "bcd", 3, str -> text), "Matched sub-string (\"abcde\", 1, 3) = \"bcd\"");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   91-block 67
call    3 returned 1
    %%%%%:   91-block 68
call    4 never executed
        1:   92:	delete_string (&str);
        1:   92-block 69
call    0 returned 1
        1:   93:	str = get_sub_string (string, 4, 1);
call    0 returned 1
       1*:   94:	TEST (true == compare_raw_strings_shh (4, "edcb", 4, str -> text), "Matched sub-string (\"abcde\", 4, 1) = \"edcb\"");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   94-block 73
call    3 returned 1
    %%%%%:   94-block 74
call    4 never executed
        1:   95:	delete_string (&str);
        1:   95-block 75
call    0 returned 1
        1:   96:	str = get_sub_string (string, -10, 10);
call    0 returned 1
       1*:   97:	TEST (true == compare_raw_strings_shh (5, "abcde", 5, str -> text), "Matched sub-string (\"abcde\", -10, 10) = \"abcde\"");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   97-block 79
call    3 returned 1
    %%%%%:   97-block 80
call    4 never executed
        1:   98:	delete_string (&str);
        1:   98-block 81
call    0 returned 1
        1:   99:	str = get_sub_string (string, 10, -10);
call    0 returned 1
       1*:  100:	TEST (true == compare_raw_strings_shh (5, "edcba", 5, str -> text), "Matched sub-string (\"abcde\", 10, -10) = \"edcba\"");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  100-block 85
call    3 returned 1
    %%%%%:  100-block 86
call    4 never executed
        1:  101:	delete_string (&str);
        1:  101-block 87
call    0 returned 1
        1:  102:	str = get_sub_string (string, -10, -100);
call    0 returned 1
       1*:  103:	TEST (true == compare_raw_strings_shh (1, "a", 1, str -> text), "Matched sub-string (\"abcde\", -10, -100) = \"a\"");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  103-block 91
call    3 returned 1
    %%%%%:  103-block 92
call    4 never executed
        1:  104:	delete_string (&str);
        1:  104-block 93
call    0 returned 1
        1:  105:	delete_string (&string);
call    0 returned 1
        -:  106:
        1:  107:	string = create_string (5, "01234");
call    0 returned 1
        1:  108:	str = get_sub_str (string, 1, 3);
call    0 returned 1
       1*:  109:	TEST (true == compare_raw_strings_shh (3, "123", 3, str -> text), "Matched sub-str (\"01234\", 1, 3) = \"123\"");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  109-block 99
call    3 returned 1
    %%%%%:  109-block 100
call    4 never executed
        1:  110:	delete_string (&str);
        1:  110-block 101
call    0 returned 1
        1:  111:	str = get_sub_str (string, -1, 3);
call    0 returned 1
       1*:  112:	TEST (true == compare_raw_strings_shh (1, "4", 1, str -> text), "Matched sub-str (\"01234\", -1, 3) = \"4\"");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  112-block 105
call    3 returned 1
    %%%%%:  112-block 106
call    4 never executed
        1:  113:	delete_string (&str);
        1:  113-block 107
call    0 returned 1
        1:  114:	str = get_sub_str (string, 2, -3);
call    0 returned 1
       1*:  115:	TEST (true == compare_raw_strings_shh (3, "210", 3, str -> text), "Matched sub-str (\"01234\", 2, -3) = \"210\"");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  115-block 111
call    3 returned 1
    %%%%%:  115-block 112
call    4 never executed
        1:  116:	delete_string (&str);
        1:  116-block 113
call    0 returned 1
        1:  117:	str = get_sub_str (string, -2, -3);
call    0 returned 1
       1*:  118:	TEST (true == compare_raw_strings_shh (4, "3210", 4, str -> text), "Matched sub-str (\"01234\", -2, -3) = \"3210\"");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  118-block 117
call    3 returned 1
    %%%%%:  118-block 118
call    4 never executed
        1:  119:	delete_string (&str);
        1:  119-block 119
call    0 returned 1
        1:  120:	str = get_sub_str (string, 2, 100);
call    0 returned 1
       1*:  121:	TEST (true == compare_raw_strings_shh (3, "234", 3, str -> text), "Matched sub-str (\"01234\", 2, 100) = \"234\"");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  121-block 123
call    3 returned 1
    %%%%%:  121-block 124
call    4 never executed
        1:  122:	delete_string (&str);
        1:  122-block 125
call    0 returned 1
        1:  123:	str = get_sub_str (string, -4, -100);
call    0 returned 1
       1*:  124:	TEST (true == compare_raw_strings_shh (2, "10", 2, str -> text), "Matched sub-str (\"01234\", -4, -100) = \"10\"");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  124-block 129
call    3 returned 1
    %%%%%:  124-block 130
call    4 never executed
        1:  125:	delete_string (&str);
        1:  125-block 131
call    0 returned 1
        1:  126:	delete_string (&string);
call    0 returned 1
        -:  127:
        1:  128:	string = create_string (4, "Fun_1");
call    0 returned 1
        1:  129:	str = get_upper_case_string (string);
call    0 returned 1
       1*:  130:	TEST (true == compare_raw_strings_shh (4, "FUN_1", 4, str -> text), "Matched upper-case (\"Fun_1\") = \"FUN_1\"");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  130-block 137
call    3 returned 1
    %%%%%:  130-block 138
call    4 never executed
        1:  131:	delete_string (&str);
        1:  131-block 139
call    0 returned 1
        1:  132:	str = get_lower_case_string (string);
call    0 returned 1
       1*:  133:	TEST (true == compare_raw_strings_shh (4, "fun_1", 4, str -> text), "Matched lower-case (\"Fun_1\") = \"fun_1\"");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  133-block 143
call    3 returned 1
    %%%%%:  133-block 144
call    4 never executed
        1:  134:	delete_string (&str);
        1:  134-block 145
call    0 returned 1
        1:  135:	delete_string (&string);
call    0 returned 1
        -:  136:
        1:  137:	string = create_string (5, "HE1lo");
call    0 returned 1
        1:  138:	str = swap_string_case (string);
call    0 returned 1
       1*:  139:	TEST (true == compare_raw_strings_shh (5, "he1LO", 5, str -> text), "Matched swap-case (\"HE1lo\") = \"he1LO\"");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:  139-block 151
call    3 returned 1
    %%%%%:  139-block 152
call    4 never executed
        1:  140:	delete_string (&str);
        1:  140-block 153
call    0 returned 1
        1:  141:	delete_string (&string);
call    0 returned 1
        -:  142:
        1:  143:	printf (BOLD_YELLOW "...Unit test ends!" BOLD_MAGENTA " [String]\n" RESET_STYLE);
call    0 returned 1
        1:  144:}
