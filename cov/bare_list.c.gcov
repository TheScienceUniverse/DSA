        -:    0:Source:test/bare_list.c
        -:    0:Graph:./cov/test_bare_list.gcno
        -:    0:Data:./cov/test_bare_list.gcda
        -:    0:Runs:1
        -:    1:#include "../include/test.h"
        -:    2:
function test_bare_list called 1 returned 100% blocks executed 80%
        1:    3:void test_bare_list (void) {
        1:    4:	printf (BOLD_YELLOW "Unit test starts..." BOLD_MAGENTA " [Bare List]\n" RESET_STYLE);
        1:    4-block 2
call    0 returned 1
        -:    5:
        -:    6:	Data* data;
        1:    7:	uint32_t x = 0xa1b2c3d4;
        1:    8:	int n = 100;
        1:    9:	char* str = "Hello, World!";
        -:   10:
        1:   11:	Bare_List* list = create_bare_list (0);
call    0 returned 1
       1*:   12:	TEST (NULL != list, "Created bare list");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   12-block 5
call    2 returned 1
    %%%%%:   12-block 6
call    3 never executed
        -:   13:
        1:   14:	data = create_data (DT_Binary, sizeof (uint32_t), &x);
        1:   14-block 7
call    0 returned 1
        1:   15:	add_to_bare_list (list, data, true);
call    0 returned 1
       1*:   16:	TEST (1 == list -> item_count, "Expected item count (1) in bare list");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   16-block 10
call    2 returned 1
    %%%%%:   16-block 11
call    3 never executed
       1*:   17:	TEST (Cmp_Equivalent == compare_data (data, *(list -> item_addresses + 0)), "Compared inserted data with expected data");
        1:   17-block 12
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   17-block 14
call    3 returned 1
    %%%%%:   17-block 15
call    4 never executed
        1:   18:	delete_data (&data);
        1:   18-block 16
call    0 returned 1
        -:   19:
        1:   20:	data = create_data (DT_Integer, sizeof (int), &n);
call    0 returned 1
        1:   21:	add_to_bare_list (list, data, true);
call    0 returned 1
       1*:   22:	TEST (2 == list -> item_count, "Expected item count (2) in bare list");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   22-block 20
call    2 returned 1
    %%%%%:   22-block 21
call    3 never executed
       1*:   23:	TEST (Cmp_Equivalent == compare_data (data, *(list -> item_addresses + 1)), "Compared inserted data with expected data");
        1:   23-block 22
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   23-block 24
call    3 returned 1
    %%%%%:   23-block 25
call    4 never executed
        1:   24:		delete_data (&data);
        1:   24-block 26
call    0 returned 1
        -:   25:
        1:   26:	data = create_data (DT_String, 5, str);
call    0 returned 1
        1:   27:	add_to_bare_list (list, data, true);
call    0 returned 1
       1*:   28:	TEST (3 == list -> item_count, "Expected item count (3) in bare list");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   28-block 30
call    2 returned 1
    %%%%%:   28-block 31
call    3 never executed
       1*:   29:	TEST (Cmp_Equivalent == compare_data (data, *(list -> item_addresses + 2)), "Compared inserted data with expected data");
        1:   29-block 32
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   29-block 34
call    3 returned 1
    %%%%%:   29-block 35
call    4 never executed
        1:   30:	delete_data (&data);
        1:   30-block 36
call    0 returned 1
        -:   31:
        1:   32:	delete_bare_list (&list);
call    0 returned 1
       1*:   33:	TEST (NULL == list, "Deleted bare list");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   33-block 39
call    2 returned 1
    %%%%%:   33-block 40
call    3 never executed
        -:   34:
        -:   35:
        -:   36:/*
        -:   37:List2* duplicate_list2 (List2* list);
        -:   38:void forget_list2 (List2** list_address);
        -:   39:void add_data_to_list2 (List2* list, void* data, bool data_copy_needed);
        -:   40:void display_list2_properties (List2* list);
        -:   41:void display_list2 (List2* list);
        -:   42:void display_list2_addresses (List2* list);
        -:   43:size_t search_in_address_list2 (List2* list, void* address);
        -:   44:bool remove_address_from_list2 (List2* list, void* address);
        -:   45:*/
        -:   46:
        -:   47:	/*...*/
        -:   48://	printf("%lu\n", sysconf(_SC_PAGESIZE) / sizeof(void*));
        -:   49:
        1:   50:	printf (BOLD_YELLOW "...Unit test ends!" BOLD_MAGENTA " [Bare List]\n" RESET_STYLE);
        1:   50-block 41
call    0 returned 1
        1:   51:}
