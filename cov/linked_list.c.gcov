        -:    0:Source:test/linked_list.c
        -:    0:Graph:./cov/test_linked_list.gcno
        -:    0:Data:./cov/test_linked_list.gcda
        -:    0:Runs:1
        -:    1:#include "../include/test.h"
        -:    2:
function test_linked_list called 1 returned 100% blocks executed 72%
        1:    3:void test_linked_list (void) {
        1:    4:	printf (BOLD_YELLOW "Unit test starts..." BOLD_MAGENTA " [Linked-List]\n" RESET_STYLE);
        1:    4-block 2
call    0 returned 1
        -:    5:
        1:    6:	Linked_List* linked_list = create_linked_list ();
call    0 returned 1
        -:    7:
       1*:    8:	TEST (NULL != linked_list, "Created linked list exists");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:    8-block 5
call    2 returned 1
    %%%%%:    8-block 6
call    3 never executed
        -:    9:
        1:   10:	Node* node = create_node (N_LinkedList);
        1:   10-block 7
call    0 returned 1
        1:   11:	set_node_name (node, 1, "A");
call    0 returned 1
        -:   12:
        1:   13:	int n = 10;
        1:   14:	Data* data = create_data (DT_Integer, sizeof (int), &n);
call    0 returned 1
        1:   15:	set_node_data (node, data);
call    0 returned 1
        -:   16:
        1:   17:	attach_node_at_first (linked_list, node);
call    0 returned 1
       1*:   18:	TEST ('A' == *((char*)(linked_list -> head_node -> name -> address + 0)), "Compared inserted node's name (A) with linked-list's head node name");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   18-block 13
call    2 returned 1
    %%%%%:   18-block 14
call    3 never executed
       1*:   19:	TEST (10 == *((int*)(linked_list -> head_node -> data -> address + 0)), "Compared inserted node's data (10) with linked-list's head node data");
        1:   19-block 15
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   19-block 16
call    2 returned 1
    %%%%%:   19-block 17
call    3 never executed
       1*:   20:	TEST ('A' == *((char*)(linked_list -> head_node -> name -> address + 0)), "Compared inserted node's name (A) with linked-list's tail node name");
        1:   20-block 18
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   20-block 19
call    2 returned 1
    %%%%%:   20-block 20
call    3 never executed
       1*:   21:	TEST (10 == *((int*)(linked_list -> head_node -> data -> address + 0)), "Compared inserted node's data (10) with linked-list's tail node data");
        1:   21-block 21
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   21-block 22
call    2 returned 1
    %%%%%:   21-block 23
call    3 never executed
        -:   22:// A
        1:   23:	++*(node -> name -> address);
        1:   24:	*((int*)(node -> data -> address)) += 10;
        1:   25:	attach_node_at_last (linked_list, node);
        1:   25-block 24
call    0 returned 1
       1*:   26:	TEST ('A' == *((char*)(linked_list -> head_node -> name -> address + 0)), "Compared inserted node's name (A) with linked-list's head node name");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   26-block 26
call    2 returned 1
    %%%%%:   26-block 27
call    3 never executed
       1*:   27:	TEST (10 == *((int*)(linked_list -> head_node -> data -> address + 0)), "Compared inserted node's data (10) with linked-list's head node data");
        1:   27-block 28
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   27-block 29
call    2 returned 1
    %%%%%:   27-block 30
call    3 never executed
       1*:   28:	TEST ('B' == *((char*)(linked_list -> tail_node -> name -> address + 0)), "Compared inserted node's name (B) with linked-list's tail node name");
        1:   28-block 31
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   28-block 32
call    2 returned 1
    %%%%%:   28-block 33
call    3 never executed
       1*:   29:	TEST (20 == *((int*)(linked_list -> tail_node -> data -> address + 0)), "Compared inserted node's data (20) with linked-list's tail node data");
        1:   29-block 34
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   29-block 35
call    2 returned 1
    %%%%%:   29-block 36
call    3 never executed
        -:   30:// A - B
        1:   31:	++*(node -> name -> address);
        1:   32:	*((int*)(node -> data -> address)) += 10;
        1:   33:	attach_node_at_first (linked_list, node);
        1:   33-block 37
call    0 returned 1
       1*:   34:	TEST ('C' == *((char*)(linked_list -> head_node -> name -> address + 0)), "Compared inserted node's name (C) with linked-list's head node name");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   34-block 39
call    2 returned 1
    %%%%%:   34-block 40
call    3 never executed
       1*:   35:	TEST (30 == *((int*)(linked_list -> head_node -> data -> address + 0)), "Compared inserted node's data (30) with linked-list's head node data");
        1:   35-block 41
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   35-block 42
call    2 returned 1
    %%%%%:   35-block 43
call    3 never executed
       1*:   36:	TEST ('B' == *((char*)(linked_list -> tail_node -> name -> address + 0)), "Compared inserted node's name (B) with linked-list's tail node name");
        1:   36-block 44
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   36-block 45
call    2 returned 1
    %%%%%:   36-block 46
call    3 never executed
       1*:   37:	TEST (20 == *((int*)(linked_list -> tail_node -> data -> address + 0)), "Compared inserted node's data (20) with linked-list's tail node data");
        1:   37-block 47
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   37-block 48
call    2 returned 1
    %%%%%:   37-block 49
call    3 never executed
        -:   38:// C - A - B
        1:   39:	++*(node -> name -> address);
        1:   40:	*((int*)(node -> data -> address)) += 10;
        1:   41:	attach_node_at_last (linked_list, node);
        1:   41-block 50
call    0 returned 1
       1*:   42:	TEST ('C' == *((char*)(linked_list -> head_node -> name -> address + 0)), "Compared inserted node's name (C) with linked-list's head node name");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   42-block 52
call    2 returned 1
    %%%%%:   42-block 53
call    3 never executed
       1*:   43:	TEST (30 == *((int*)(linked_list -> head_node -> data -> address + 0)), "Compared inserted node's data (30) with linked-list's head node data");
        1:   43-block 54
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   43-block 55
call    2 returned 1
    %%%%%:   43-block 56
call    3 never executed
       1*:   44:	TEST ('D' == *((char*)(linked_list -> tail_node -> name -> address + 0)), "Compared inserted node's name (D) with linked-list's tail node name");
        1:   44-block 57
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   44-block 58
call    2 returned 1
    %%%%%:   44-block 59
call    3 never executed
       1*:   45:	TEST (40 == *((int*)(linked_list -> tail_node -> data -> address + 0)), "Compared inserted node's data (40) with linked-list's tail node data");
        1:   45-block 60
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   45-block 61
call    2 returned 1
    %%%%%:   45-block 62
call    3 never executed
        -:   46:// C - A - B - D
        1:   47:	Node* del_node = detach_head_from_linked_list (linked_list);
        1:   47-block 63
call    0 returned 1
       1*:   48:	TEST ('C' == *((char*)(del_node -> name -> address + 0)), "Compared deleted node's name (C) with expected node name");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   48-block 65
call    2 returned 1
    %%%%%:   48-block 66
call    3 never executed
       1*:   49:	TEST (30 == *((int*)(del_node -> data -> address + 0)), "Compared deleted node's data (30) with expected node data");
        1:   49-block 67
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   49-block 68
call    2 returned 1
    %%%%%:   49-block 69
call    3 never executed
       1*:   50:	TEST ('A' == *((char*)(linked_list -> head_node -> name -> address + 0)), "Compared inserted node's name (A) with linked-list's head node name");
        1:   50-block 70
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   50-block 71
call    2 returned 1
    %%%%%:   50-block 72
call    3 never executed
       1*:   51:	TEST (10 == *((int*)(linked_list -> head_node -> data -> address + 0)), "Compared inserted node's data (10) with linked-list's head node data");
        1:   51-block 73
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   51-block 74
call    2 returned 1
    %%%%%:   51-block 75
call    3 never executed
       1*:   52:	TEST ('D' == *((char*)(linked_list -> tail_node -> name -> address + 0)), "Compared inserted node's name (D) with linked-list's tail node name");
        1:   52-block 76
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   52-block 77
call    2 returned 1
    %%%%%:   52-block 78
call    3 never executed
       1*:   53:	TEST (40 == *((int*)(linked_list -> tail_node -> data -> address + 0)), "Compared inserted node's data (40) with linked-list's tail node data");
        1:   53-block 79
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   53-block 80
call    2 returned 1
    %%%%%:   53-block 81
call    3 never executed
        1:   54:	delete_node (&del_node);
        1:   54-block 82
call    0 returned 1
        -:   55:// A - B - D
        1:   56:	del_node = detach_tail_from_linked_list (linked_list);
call    0 returned 1
       1*:   57:	TEST ('D' == *((char*)(del_node -> name -> address + 0)), "Compared deleted node's name (D) with expected node name");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   57-block 85
call    2 returned 1
    %%%%%:   57-block 86
call    3 never executed
       1*:   58:	TEST (40 == *((int*)(del_node -> data -> address + 0)), "Compared deleted node's data (40) with expected node data");
        1:   58-block 87
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   58-block 88
call    2 returned 1
    %%%%%:   58-block 89
call    3 never executed
       1*:   59:	TEST ('A' == *((char*)(linked_list -> head_node -> name -> address + 0)), "Compared inserted node's name (A) with linked-list's head node name");
        1:   59-block 90
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   59-block 91
call    2 returned 1
    %%%%%:   59-block 92
call    3 never executed
       1*:   60:	TEST (10 == *((int*)(linked_list -> head_node -> data -> address + 0)), "Compared inserted node's data (10) with linked-list's head node data");
        1:   60-block 93
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   60-block 94
call    2 returned 1
    %%%%%:   60-block 95
call    3 never executed
       1*:   61:	TEST ('B' == *((char*)(linked_list -> tail_node -> name -> address + 0)), "Compared inserted node's name (B) with linked-list's tail node name");
        1:   61-block 96
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   61-block 97
call    2 returned 1
    %%%%%:   61-block 98
call    3 never executed
       1*:   62:	TEST (20 == *((int*)(linked_list -> tail_node -> data -> address + 0)), "Compared inserted node's data (20) with linked-list's tail node data");
        1:   62-block 99
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   62-block 100
call    2 returned 1
    %%%%%:   62-block 101
call    3 never executed
        1:   63:	delete_node (&del_node);
        1:   63-block 102
call    0 returned 1
        -:   64:// A - B
        -:   65:
        1:   66:	delete_node (&node);
call    0 returned 1
        -:   67:
        1:   68:	delete_linked_list (&linked_list);
call    0 returned 1
       1*:   69:	TEST (NULL == linked_list, "Deleted linked-list successfully");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   69-block 106
call    2 returned 1
    %%%%%:   69-block 107
call    3 never executed
        -:   70:
        1:   71:	printf (BOLD_YELLOW "...Unit test ends!" BOLD_MAGENTA " [Linked-List]\n" RESET_STYLE);
        1:   71-block 108
call    0 returned 1
        1:   72:}
