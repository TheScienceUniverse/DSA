        -:    0:Source:tst/stack.c
        -:    0:Graph:./cov/test_stack.gcno
        -:    0:Data:./cov/test_stack.gcda
        -:    0:Runs:1
        -:    1:#include "../inc/test.h"
        -:    2:
function test_stack called 1 returned 100% blocks executed 78%
        1:    3:void test_stack (void) {
        1:    4:	printf (BOLD_YELLOW "Unit test starts..." BOLD_MAGENTA " [Stack]\n" RESET_STYLE);
        1:    4-block 2
call    0 returned 1
        -:    5:
        1:    6:	Stack* stack = create_stack ();
call    0 returned 1
        -:    7:
       1*:    8:	TEST (NULL != stack, "Created Stack exists");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:    8-block 5
call    2 returned 1
    %%%%%:    8-block 6
call    3 never executed
        -:    9:
        1:   10:	Node* node = create_node (N_Stack);
        1:   10-block 7
call    0 returned 1
        1:   11:	set_node_name (node, 1, "A");
call    0 returned 1
        -:   12:
        1:   13:	int n = 10;
        1:   14:	Data* data = create_data (DT_Integer, sizeof (int), &n);
call    0 returned 1
        1:   15:	set_node_data (node, data);
call    0 returned 1
        1:   16:	delete_data (&data);
call    0 returned 1
        -:   17:
        1:   18:	push_node_onto_stack (stack, node);
call    0 returned 1
        -:   19:
       1*:   20:	TEST (1 == stack -> size, "Stack size increased");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   20-block 14
call    2 returned 1
    %%%%%:   20-block 15
call    3 never executed
       1*:   21:	TEST (Cmp_Equivalent == compare_nodes (node, stack -> top_node), "Compared pushed node with stack's top node");
        1:   21-block 16
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        1:   21-block 18
call    3 returned 1
    %%%%%:   21-block 19
call    4 never executed
        -:   22:
        1:   23:	++*(node -> name -> text);
        1:   24:	*((int*)(node -> data -> address)) += 10;
        1:   25:	push_node_onto_stack (stack, node);
        1:   25-block 20
call    0 returned 1
        -:   26:
       1*:   27:	TEST ('B' == *((char*)(stack -> top_node -> name -> text + 0)), "Compared pushed node's name (B) with stack's top node name");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   27-block 22
call    2 returned 1
    %%%%%:   27-block 23
call    3 never executed
       1*:   28:	TEST (20 == *((int*)(stack -> top_node -> data -> address + 0)), "Compared pushed node's data (20) with stack's top node data");
        1:   28-block 24
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   28-block 25
call    2 returned 1
    %%%%%:   28-block 26
call    3 never executed
        -:   29:
        1:   30:	++*(node -> name -> text);
        1:   31:	*((int*)(node -> data -> address)) += 10;
        1:   32:	push_node_onto_stack (stack, node);
        1:   32-block 27
call    0 returned 1
        -:   33:
       1*:   34:	TEST ('C' == *((char*)(stack -> top_node -> name -> text + 0)), "Compared pushed node's name (C) with stack's top node name");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   34-block 29
call    2 returned 1
    %%%%%:   34-block 30
call    3 never executed
       1*:   35:	TEST (30 == *((int*)(stack -> top_node -> data -> address + 0)), "Compared pushed node's data (30) with stack's top node data");
        1:   35-block 31
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   35-block 32
call    2 returned 1
    %%%%%:   35-block 33
call    3 never executed
        -:   36:
        1:   37:	Node* del_node = pop_node_from_stack (stack);
        1:   37-block 34
call    0 returned 1
       1*:   38:	TEST ('C' == *((char*)(del_node -> name -> text + 0)), "Compared popped node's name (C) with expected node name");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   38-block 36
call    2 returned 1
    %%%%%:   38-block 37
call    3 never executed
       1*:   39:	TEST (30 == *((int*)(del_node -> data -> address + 0)), "Compared popped node's data (30) with expected node data");
        1:   39-block 38
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   39-block 39
call    2 returned 1
    %%%%%:   39-block 40
call    3 never executed
        1:   40:	delete_node (&del_node);
        1:   40-block 41
call    0 returned 1
        -:   41:
        1:   42:	++*(node -> name -> text);
        1:   43:	*((int*)(node -> data -> address)) += 10;
        1:   44:	push_node_onto_stack (stack, node);
call    0 returned 1
       1*:   45:	TEST ('D' == *((char*)(stack -> top_node -> name -> text + 0)), "Compared pushed node's name (D) with stack's top node name");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   45-block 44
call    2 returned 1
    %%%%%:   45-block 45
call    3 never executed
       1*:   46:	TEST (40 == *((int*)(stack -> top_node -> data -> address + 0)), "Compared pushed node's data (40) with stack's top node data");
        1:   46-block 46
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   46-block 47
call    2 returned 1
    %%%%%:   46-block 48
call    3 never executed
        -:   47:
        1:   48:	del_node = pop_node_from_stack (stack);
        1:   48-block 49
call    0 returned 1
       1*:   49:	TEST ('D' == *((char*)(del_node -> name -> text + 0)), "Compared popped node's name (D) with expected node name");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   49-block 51
call    2 returned 1
    %%%%%:   49-block 52
call    3 never executed
       1*:   50:	TEST (40 == *((int*)(del_node -> data -> address + 0)), "Compared popped node's data (40) with expected node data");
        1:   50-block 53
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   50-block 54
call    2 returned 1
    %%%%%:   50-block 55
call    3 never executed
        1:   51:	delete_node (&del_node);
        1:   51-block 56
call    0 returned 1
        -:   52:
        1:   53:	del_node = pop_node_from_stack (stack);
call    0 returned 1
       1*:   54:	TEST ('B' == *((char*)(del_node -> name -> text + 0)), "Compared popped node's name (B) with expected node name");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   54-block 59
call    2 returned 1
    %%%%%:   54-block 60
call    3 never executed
       1*:   55:	TEST (20 == *((int*)(del_node -> data -> address + 0)), "Compared popped node's data (20) with expected node data");
        1:   55-block 61
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   55-block 62
call    2 returned 1
    %%%%%:   55-block 63
call    3 never executed
        1:   56:	delete_node (&del_node);
        1:   56-block 64
call    0 returned 1
        -:   57:
        1:   58:	del_node = pop_node_from_stack (stack);
call    0 returned 1
       1*:   59:	TEST ('A' == *((char*)(del_node -> name -> text + 0)), "Compared popped node's name (A) with expected node name");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   59-block 67
call    2 returned 1
    %%%%%:   59-block 68
call    3 never executed
       1*:   60:	TEST (10 == *((int*)(del_node -> data -> address + 0)), "Compared popped node's data (10) with expected node data");
        1:   60-block 69
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   60-block 70
call    2 returned 1
    %%%%%:   60-block 71
call    3 never executed
        1:   61:	delete_node (&del_node);
        1:   61-block 72
call    0 returned 1
        -:   62:
        1:   63:	data = create_data (DT_Integer, sizeof (int), &n);
call    0 returned 1
        -:   64:
        1:   65:	*((int*)(data -> address)) = -10;
        1:   66:	push_data_onto_stack (stack, data);
call    0 returned 1
       1*:   67:	TEST (-10 == *((int*)(stack -> top_node -> data -> address)), "Compared pushed data (-10) with stack's top node data");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   67-block 76
call    2 returned 1
    %%%%%:   67-block 77
call    3 never executed
        -:   68:
        1:   69:	*((int*)(data -> address)) = -20;
        1:   70:	push_data_onto_stack (stack, data);
        1:   70-block 78
call    0 returned 1
       1*:   71:	TEST (-20 == *((int*)(stack -> top_node -> data -> address)), "Compared pushed data (-20) with stack's top node data");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   71-block 80
call    2 returned 1
    %%%%%:   71-block 81
call    3 never executed
        -:   72:
        1:   73:	delete_data (&data);
        1:   73-block 82
call    0 returned 1
        -:   74:
        1:   75:	data = pop_data_from_stack (stack);
call    0 returned 1
       1*:   76:	TEST (-20 == *((int*)(data -> address)), "Compared popped data (-20) with expected data");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   76-block 85
call    2 returned 1
    %%%%%:   76-block 86
call    3 never executed
        1:   77:	delete_data (&data);
        1:   77-block 87
call    0 returned 1
        -:   78:
        1:   79:	data = pop_data_from_stack (stack);
call    0 returned 1
       1*:   80:	TEST (-10 == *((int*)(data -> address)), "Compared popped data (-20) with expected data");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   80-block 90
call    2 returned 1
    %%%%%:   80-block 91
call    3 never executed
        1:   81:	delete_data (&data);
        1:   81-block 92
call    0 returned 1
        -:   82:
        1:   83:	del_node = pop_node_from_stack (stack);
call    0 returned 1
       1*:   84:	TEST (0 == stack -> size, "Compared stack's expected size emptiness");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   84-block 95
call    2 returned 1
    %%%%%:   84-block 96
call    3 never executed
       1*:   85:	TEST (NULL == del_node, "Compared popped node does not exist");
        1:   85-block 97
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   85-block 98
call    2 returned 1
    %%%%%:   85-block 99
call    3 never executed
        1:   86:	if (NULL == del_node) {delete_node (&del_node);}
        1:   86-block 100
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   86-block 101
call    2 returned 1
        -:   87:
        1:   88:	delete_node (&node);
        1:   88-block 102
call    0 returned 1
        -:   89:
        1:   90:	delete_stack (&stack);
call    0 returned 1
       1*:   91:	TEST (NULL == stack, "Deleted stack successfully");
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:   91-block 105
call    2 returned 1
    %%%%%:   91-block 106
call    3 never executed
        -:   92:
        1:   93:	printf (BOLD_YELLOW "...Unit test ends!" BOLD_MAGENTA " [Stack]\n" RESET_STYLE);
        1:   93-block 107
call    0 returned 1
        1:   94:}
