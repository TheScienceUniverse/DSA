[1;33mUnit test starts...[1;35m [Basic]
[0m	[[1;32mPASSED[0m]: (Address non-null check)
	[[1;32mPASSED[0m]: (Allocated block-size check)
	[[1;32mPASSED[0m]: (Address validation check)
	[[1;32mPASSED[0m]: (Content check)
	[[1;32mPASSED[0m]: (Address validation check)
	[[1;32mPASSED[0m]: (Address nullification check)
	[[1;32mPASSED[0m]: (Content check)
[1;33m...Unit test ends![1;35m [Basic]
[0m[1;33mUnit test starts...[1;35m [String]
[0m	[[1;32mPASSED[0m]: (Address non-null check)
	[[1;32mPASSED[0m]: (Allocated block-size check)
	[[1;32mPASSED[0m]: (Address validation check)
	[[1;32mPASSED[0m]: (Content check)
	[[1;32mPASSED[0m]: (String existance check)
	[[1;32mPASSED[0m]: (String deletion check)
	[[1;32mPASSED[0m]: (Checked concatenated string lengths)
	[[1;32mPASSED[0m]: (Matched concatenated strings)
	[[1;32mPASSED[0m]: (Matched identical strings)
	[[1;32mPASSED[0m]: (Mis-matched different strings)
	[[1;32mPASSED[0m]: (Matched equivalent strings)
	[[1;32mPASSED[0m]: (Matched get char at given index in a string)
	[[1;32mPASSED[0m]: (Matched sub-string ("abcde", 1, 3) = "bcd")
	[[1;32mPASSED[0m]: (Matched sub-string ("abcde", 4, 1) = "edcb")
	[[1;32mPASSED[0m]: (Matched sub-string ("abcde", -10, 10) = "abcde")
	[[1;32mPASSED[0m]: (Matched sub-string ("abcde", 10, -10) = "edcba")
	[[1;32mPASSED[0m]: (Matched sub-string ("abcde", -10, -100) = "a")
	[[1;32mPASSED[0m]: (Matched sub-str ("01234", 1, 3) = "123")
	[[1;32mPASSED[0m]: (Matched sub-str ("01234", -1, 3) = "4")
	[[1;32mPASSED[0m]: (Matched sub-str ("01234", 2, -3) = "210")
	[[1;32mPASSED[0m]: (Matched sub-str ("01234", -2, -3) = "3210")
	[[1;32mPASSED[0m]: (Matched sub-str ("01234", 2, 100) = "234")
	[[1;32mPASSED[0m]: (Matched sub-str ("01234", -4, -100) = "10")
	[[1;32mPASSED[0m]: (Matched upper-case ("Fun_1") = "FUN_1")
	[[1;32mPASSED[0m]: (Matched lower-case ("Fun_1") = "fun_1")
	[[1;32mPASSED[0m]: (Matched swap-case ("HE1lo") = "he1LO")
	[[1;32mPASSED[0m]: (Matched capitalize string ("heLLo") = "Hello")
	[[1;32mPASSED[0m]: (Matched title case string ("heLLo, wOrLd") = "Hello, World")
[1;33m...Unit test ends![1;35m [String]
[0m[1;33mUnit test starts...[1;35m [Data]
[0m	[[1;32mPASSED[0m]: (Address non-null check)
	[[1;32mPASSED[0m]: (Datatype match check)
	[[1;32mPASSED[0m]: (Address non-nullified check)
	[[1;32mPASSED[0m]: (Address nullification check)
[1;33m...Unit test ends![1;35m [Data]
[0m[1;33mUnit test starts...[1;35m [Chunk]
[0m	[[1;32mPASSED[0m]: (Chunk created)
	[[1;32mPASSED[0m]: (Chunk start id check)
	[[1;32mPASSED[0m]: (Chunk default capacity check)
	[[1;32mPASSED[0m]: (Chunk default data count check)
	[[1;32mPASSED[0m]: (Chunk filled with data)
	[[1;32mPASSED[0m]: (Last chunk exists)
	[[1;32mPASSED[0m]: (Data inserted into chunk)
	[[1;32mPASSED[0m]: (Last chunk id check)
	[[1;32mPASSED[0m]: (Last chunk filled with data)
	[[1;32mPASSED[0m]: (Last chunk exists)
	[[1;32mPASSED[0m]: (Last chunk id check)
	[[1;32mPASSED[0m]: (Data deleted from chunk)
	[[1;32mPASSED[0m]: (Last chunk filled with data)
	[[1;32mPASSED[0m]: (Last chunk exists)
	[[1;32mPASSED[0m]: (Last chunk id check)
	[[1;32mPASSED[0m]: (All chunks empty)
	[[1;32mPASSED[0m]: (Last chunk empty)
	[[1;32mPASSED[0m]: (Created duplicate chunk)
	[[1;32mPASSED[0m]: (Compared duplicated chunk)
	[[1;32mPASSED[0m]: (Deleted chunk)
[1;33m...Unit test ends![1;35m [Chunk]
[0m[1;33mUnit test starts...[1;35m [Bare List]
[0m	[[1;32mPASSED[0m]: (Created bare list)
	[[1;32mPASSED[0m]: (Expected item count (1) in bare list)
	[[1;32mPASSED[0m]: (Compared inserted data with expected data)
	[[1;32mPASSED[0m]: (Expected item count (2) in bare list)
	[[1;32mPASSED[0m]: (Compared inserted data with expected data)
	[[1;32mPASSED[0m]: (Expected item count (3) in bare list)
	[[1;32mPASSED[0m]: (Compared inserted data with expected data)
	[[1;32mPASSED[0m]: (Deleted bare list)
[1;33m...Unit test ends![1;35m [Bare List]
[0m[1;33mUnit test starts...[1;35m [List]
[0m	[[1;32mPASSED[0m]: (List created)
	[[1;32mPASSED[0m]: (List has no items)
	[[1;32mPASSED[0m]: (List has starting buffer chunk)
	[[1;32mPASSED[0m]: (List has start id check)
	[[1;32mPASSED[0m]: (List has first chunk with default capacity)
	[[1;32mPASSED[0m]: (List last chunk is same as the first chunk)
	[[1;32mPASSED[0m]: (List default data count check)
	[[1;32mPASSED[0m]: (List's first chunk is the last chunk)
	[[1;32mPASSED[0m]: (List filled with data)
	[[1;32mPASSED[0m]: (Received search index-list result)
	[[1;32mPASSED[0m]: (Matched count of searched data)
	[[1;32mPASSED[0m]: (Fetched data with given index exists)
	[[1;32mPASSED[0m]: (Fetched data matched with value)
	[[1;32mPASSED[0m]: (Matched first index of given data)
	[[1;31mFAILED[0m]: (Matched last index of given data)							file:tst/list.c line:63
	[[1;32mPASSED[0m]: (Matched inserted data with expected data at position)
	[[1;32mPASSED[0m]: (Created test list)
	[[1;32mPASSED[0m]: (Created test list with expected number of data)
	[[1;31mFAILED[0m]: (Test list appended into the original list)							file:tst/list.c line:96
	[[1;32mPASSED[0m]: (Checked inserted first data from list)
	[[1;32mPASSED[0m]: (Checked inserted last data from list)
	[[1;32mPASSED[0m]: (Created test list)
	[[1;32mPASSED[0m]: (Created test list with expected number of data)
	[[1;32mPASSED[0m]: (Checked inserted list's first data from original list)
	[[1;32mPASSED[0m]: (Checked inserted list's last data from original list)
	[[1;32mPASSED[0m]: (Created test list)
	[[1;32mPASSED[0m]: (Created test list with expected number of data)
	[[1;32mPASSED[0m]: (Matched first data of sub-list to copy index from equivalent original list)
	[[1;31mFAILED[0m]: (Matched last data of sub-list to copy index from equivalent original list)							file:tst/list.c line:149
	[[1;32mPASSED[0m]: (Deleted data in the original list)
	[[1;32mPASSED[0m]: (Matched removed data from original list)
	[[1;32mPASSED[0m]: (Checked item-count in sample list before clearing list)
	[[1;32mPASSED[0m]: (Checked item-count in sample list after clearing list)
	[[1;31mFAILED[0m]: (List non-emptiness check)							file:tst/list.c line:194
	[[1;32mPASSED[0m]: (List emptiness check)
	[[1;32mPASSED[0m]: (Checked lists are equivalent or not)
	[[1;32mPASSED[0m]: (Found expected data)
	[[1;32mPASSED[0m]: (Not found unexpected data)
	[[1;32mPASSED[0m]: (Checked small list chunk size)
	[[1;32mPASSED[0m]: (Matched small list item count)
	[[1;32mPASSED[0m]: (Matched duplicate list with original list)
[1;33m...Unit test ends![1;35m [List]
[0m[1;33mUnit test starts...[1;35m [Iterator]
[0m	[[1;32mPASSED[0m]: (Created iterator)
	[[1;32mPASSED[0m]: (Matched chunk-id from iterator)
	[[1;32mPASSED[0m]: (Matched first data from list and iterator)
	[[1;32mPASSED[0m]: (Matched second data from list and iterator)
	[[1;32mPASSED[0m]: (Checked default stride value)
	[[1;32mPASSED[0m]: (Checked updated stride value)
	[[1;32mPASSED[0m]: (Matched step (1 + 5) data from list and iterator)
	[[1;32mPASSED[0m]: (Matched updated stride (+6) from iterator)
	[[1;32mPASSED[0m]: (Matched expected forward chunk id (1) from iterator)
	[[1;32mPASSED[0m]: (Matched further data (6 + 6) from list and iterator)
	[[1;32mPASSED[0m]: (Matched updated stride (-5) from iterator)
	[[1;32mPASSED[0m]: (Matched expected backward chunk id (0) from iterator)
	[[1;32mPASSED[0m]: (Matched backward data (12 - 5) from list and iterator)
	[[1;32mPASSED[0m]: (Deleted iterator)
[1;33m...Unit test ends![1;35m [Iterator]
[0m[1;33mUnit test starts...[1;35m [Node]
[0m	[[1;32mPASSED[0m]: (Created node exists)
	[[1;32mPASSED[0m]: (Matched node-name with set name)
	[[1;32mPASSED[0m]: (Compared node data with set data)
	[[1;32mPASSED[0m]: (Created duplicate node exists)
	[[1;32mPASSED[0m]: (Compared duplicated node with original)
	[[1;32mPASSED[0m]: (Deleted node successfully)
[1;33m...Unit test ends![1;35m [Node]
[0m[1;33mUnit test starts...[1;35m [Linked-List]
[0m	[[1;32mPASSED[0m]: (Created linked list exists)
	[[1;32mPASSED[0m]: (Compared inserted node's name (A) with linked-list's head node name)
	[[1;32mPASSED[0m]: (Compared inserted node's data (10) with linked-list's head node data)
	[[1;32mPASSED[0m]: (Compared inserted node's name (A) with linked-list's tail node name)
	[[1;32mPASSED[0m]: (Compared inserted node's data (10) with linked-list's tail node data)
	[[1;32mPASSED[0m]: (Compared inserted node's name (A) with linked-list's head node name)
	[[1;32mPASSED[0m]: (Compared inserted node's data (10) with linked-list's head node data)
	[[1;32mPASSED[0m]: (Compared inserted node's name (B) with linked-list's tail node name)
	[[1;32mPASSED[0m]: (Compared inserted node's data (20) with linked-list's tail node data)
	[[1;32mPASSED[0m]: (Compared inserted node's name (C) with linked-list's head node name)
	[[1;32mPASSED[0m]: (Compared inserted node's data (30) with linked-list's head node data)
	[[1;32mPASSED[0m]: (Compared inserted node's name (B) with linked-list's tail node name)
	[[1;32mPASSED[0m]: (Compared inserted node's data (20) with linked-list's tail node data)
	[[1;32mPASSED[0m]: (Compared inserted node's name (C) with linked-list's head node name)
	[[1;32mPASSED[0m]: (Compared inserted node's data (30) with linked-list's head node data)
	[[1;32mPASSED[0m]: (Compared inserted node's name (D) with linked-list's tail node name)
	[[1;32mPASSED[0m]: (Compared inserted node's data (40) with linked-list's tail node data)
	[[1;32mPASSED[0m]: (Compared deleted node's name (C) with expected node name)
	[[1;32mPASSED[0m]: (Compared deleted node's data (30) with expected node data)
	[[1;32mPASSED[0m]: (Compared inserted node's name (A) with linked-list's head node name)
	[[1;32mPASSED[0m]: (Compared inserted node's data (10) with linked-list's head node data)
	[[1;32mPASSED[0m]: (Compared inserted node's name (D) with linked-list's tail node name)
	[[1;32mPASSED[0m]: (Compared inserted node's data (40) with linked-list's tail node data)
	[[1;32mPASSED[0m]: (Compared deleted node's name (D) with expected node name)
	[[1;32mPASSED[0m]: (Compared deleted node's data (40) with expected node data)
	[[1;32mPASSED[0m]: (Compared inserted node's name (A) with linked-list's head node name)
	[[1;32mPASSED[0m]: (Compared inserted node's data (10) with linked-list's head node data)
	[[1;32mPASSED[0m]: (Compared inserted node's name (B) with linked-list's tail node name)
	[[1;32mPASSED[0m]: (Compared inserted node's data (20) with linked-list's tail node data)
	[[1;32mPASSED[0m]: (Deleted linked-list successfully)
[1;33m...Unit test ends![1;35m [Linked-List]
[0m[1;33mUnit test starts...[1;35m [Stack]
[0m	[[1;32mPASSED[0m]: (Created Stack exists)
	[[1;32mPASSED[0m]: (Stack size increased)
	[[1;32mPASSED[0m]: (Compared pushed node with stack's top node)
	[[1;32mPASSED[0m]: (Compared pushed node's name (B) with stack's top node name)
	[[1;32mPASSED[0m]: (Compared pushed node's data (20) with stack's top node data)
	[[1;32mPASSED[0m]: (Compared pushed node's name (C) with stack's top node name)
	[[1;32mPASSED[0m]: (Compared pushed node's data (30) with stack's top node data)
	[[1;32mPASSED[0m]: (Compared popped node's name (C) with expected node name)
	[[1;32mPASSED[0m]: (Compared popped node's data (30) with expected node data)
	[[1;32mPASSED[0m]: (Compared pushed node's name (D) with stack's top node name)
	[[1;32mPASSED[0m]: (Compared pushed node's data (40) with stack's top node data)
	[[1;32mPASSED[0m]: (Compared popped node's name (D) with expected node name)
	[[1;32mPASSED[0m]: (Compared popped node's data (40) with expected node data)
	[[1;32mPASSED[0m]: (Compared popped node's name (B) with expected node name)
	[[1;32mPASSED[0m]: (Compared popped node's data (20) with expected node data)
	[[1;32mPASSED[0m]: (Compared popped node's name (A) with expected node name)
	[[1;32mPASSED[0m]: (Compared popped node's data (10) with expected node data)
	[[1;32mPASSED[0m]: (Compared pushed data (-10) with stack's top node data)
	[[1;32mPASSED[0m]: (Compared pushed data (-20) with stack's top node data)
	[[1;32mPASSED[0m]: (Compared popped data (-20) with expected data)
	[[1;32mPASSED[0m]: (Compared popped data (-20) with expected data)
	[[1;32mPASSED[0m]: (Compared stack's expected size emptiness)
	[[1;32mPASSED[0m]: (Compared popped node does not exist)
	[[1;32mPASSED[0m]: (Deleted stack successfully)
[1;33m...Unit test ends![1;35m [Stack]
[0m[1;33mUnit test starts...[1;35m [Queue]
[0m	[[1;32mPASSED[0m]: (Created Queue exists)
	[[1;32mPASSED[0m]: (Compared enqueued node's name (A) with queue's front node name)
	[[1;32mPASSED[0m]: (Compared enqueued node's data (10) with queue's front node data)
	[[1;32mPASSED[0m]: (Compared enqueued node's name (A) with queue's rear node name)
	[[1;32mPASSED[0m]: (Compared enqueued node's data (10) with queue's rear node data)
	[[1;32mPASSED[0m]: (Compared enqueued node's name (A) with queue's front node name)
	[[1;32mPASSED[0m]: (Compared enqueued node's data (10) with queue's front node data)
	[[1;32mPASSED[0m]: (Compared enqueued node's name (B) with queue's rear node name)
	[[1;32mPASSED[0m]: (Compared enqueued node's data (20) with queue's rear node data)
	[[1;32mPASSED[0m]: (Compared enqueued node's name (A) with queue's front node name)
	[[1;32mPASSED[0m]: (Compared enqueued node's data (10) with queue's front node data)
	[[1;32mPASSED[0m]: (Compared enqueued node's name (C) with queue's rear node name)
	[[1;32mPASSED[0m]: (Compared enqueued node's data (30) with queue's rear node data)
	[[1;32mPASSED[0m]: (Compared served node's name (A) with dequeued node name)
	[[1;32mPASSED[0m]: (Compared served node's data (10) with dequeued node data)
	[[1;32mPASSED[0m]: (Compared expected node's name (B) with queue's front node name)
	[[1;32mPASSED[0m]: (Compared expected node's data (20) with queue's front node data)
	[[1;32mPASSED[0m]: (Compared expected node's name (C) with queue's rear node name)
	[[1;32mPASSED[0m]: (Compared expected node's data (30) with queue's rear node data)
	[[1;32mPASSED[0m]: (Compared expected node's name (B) with queue's front node name)
	[[1;32mPASSED[0m]: (Compared expected node's data (20) with queue's front node data)
	[[1;32mPASSED[0m]: (Compared expected node's name (D) with queue's rear node name)
	[[1;32mPASSED[0m]: (Compared expected node's data (40) with queue's rear node data)
	[[1;32mPASSED[0m]: (Compared served node's name (B) with dequeued node name)
	[[1;32mPASSED[0m]: (Compared served node's data (20) with dequeued node data)
	[[1;32mPASSED[0m]: (Compared expected node's name (C) with queue's front node name)
	[[1;32mPASSED[0m]: (Compared expected node's data (30) with queue's front node data)
	[[1;32mPASSED[0m]: (Compared expected node's name (D) with queue's rear node name)
	[[1;32mPASSED[0m]: (Compared expected node's data (40) with queue's rear node data)
	[[1;32mPASSED[0m]: (Compared served node's name (C) with dequeued node name)
	[[1;32mPASSED[0m]: (Compared served node's data (30) with dequeued node data)
	[[1;32mPASSED[0m]: (Compared expected node's name (D) with queue's front node name)
	[[1;32mPASSED[0m]: (Compared expected node's data (40) with queue's front node data)
	[[1;32mPASSED[0m]: (Compared expected node's name (D) with queue's rear node name)
	[[1;32mPASSED[0m]: (Compared expected node's data (40) with queue's rear node data)
	[[1;32mPASSED[0m]: (Compared served node's name (D) with dequeued node name)
	[[1;32mPASSED[0m]: (Compared served node's data (40) with dequeued node data)
	[[1;32mPASSED[0m]: (Compared queue's expected size emptiness)
	[[1;32mPASSED[0m]: (Compared dequeued node does not exist)
	[[1;32mPASSED[0m]: (Deleted queue successfully)
[1;33m...Unit test ends![1;35m [Queue]
[0m[1;33mUnit test starts...[1;35m [Tree]
[0m	[[1;32mPASSED[0m]: (Created tree)
Tree :=> node_count: (8) breadth: (0) height: (2)
	(A)
	|    
    +---(B)
	|    |    
    |    +---(D)
	|    |    
    |    +---(E)
	|    |    
    |    +---(F)
	|    
    +---(C)
	|    |    
    |    +---(G)
	|    |    
    |    +---(H)
Walking towards Root node ... (C)->(A)
Children of (B): [(D), (E), (F)]
Parent Node :=> (A)
First Node :=> (D)
Last Node :=> (F)
2nd Node :=> (E)
Deleted node: (F)
Is node belong to tree? Yes
Is node belong to tree? No
Children of (B): [(D), (E)]
Tree :=> node_count: (3) breadth: (0) height: (1)
	(B)
	|    
    +---(D)
	|    
    +---(E)
Tree :=> node_count: (7) breadth: (0) height: (2)
	(A)
	|    
    +---(B)
	|    |    
    |    +---(D)
	|    |    
    |    +---(E)
	|    
    +---(C)
	|    |    
    |    +---(G)
	|    |    
    |    +---(H)
Tree :=> node_count: (7) breadth: (0) height: (1)
	(A)
	|    
    +---(B)
	|    
    +---(C)
	|    
    +---(D)
	|    
    +---(E)
	|    
    +---(G)
	|    
    +---(H)
	[[1;32mPASSED[0m]: (Deleted tree)
[1;33m...Unit test ends![1;35m [Tree]
[0m